Para usar este proyecto en otra compu
Primero verificar si no tiene el error de los emojis si no primero agregar las lineas correspondientes al appserviceprovider
descrito abajo 
Segundo crear una base de datos laradex_development
Tercero en el archivo .env poner lo correspondiente a la bbdd
Cuarto php artisan migrate
si al ingresar a la url salta un error de keys entonces
php artisan key:generate


Laravel utiliza composer para manejar sus depencias

composer create-project --prefer-dist laravel/laravel mi-proyecto// con esto creamos un proyecto de laravel

php artisan serve //comando para iniciar el servidor de desarrollo de laravel
php artisan list //lista todos los comandos de artisan
php artisan make:controller -h // nos dice que hace el comando

CONFIGURATION
1.ir a la ruta donde esta el proyecto luego
php artisan app:name <name_App> sirve para poner el nombre a nuestra aplicacion
2.Configurar el timezone
  ir a config/app.php
  y en ese archivo en la linea 'timezon'=>'UTC' cambiamos utc por America/Guatemala
3. Configurar el idioma
   ir a config/app.php
   y en ese archivo en la linea 'locale'=>'en' cambiamos en por es
   luego en la carpeta resources/lang creamos una carpeta llamada es 
   bajamos los archivos de lenguaje espa√±ol de git https://github.com/caouecs/Laravel-lang
   dentro de ese link de github en la carpeta src buscamos la carpeta es
   copiamos los cuatro archivos y los pegamos en nuestra carpeta es de nuestro proyecto

TEORIA HTTP
Es el protocolo de comunicacion que permite las tranferencias de informacion en la WWW.
http define una serie predefinida de metodos de peticion(verbos).

GET
Solicita una representacion dle recurso especificado.
POST
Envia los datos para que sean procesados por el recurso.
PUT/PATCH
Se utiliza para actualizar un recurso especificado
DELETE
Borra un recurso especificado

RUTAS
Para trabajar con las rutas nos vamos a 
routes/web.php //aca van las rutas de nuestro proyecto web

La sintaxis de una ruta en laravel es:

Route::<verbo_http>('/<nombre_ruta>',function(){
	return <cadena_o_view>;
});

La sintaxis de una ruta con parametros en laravel es:

Route::<verbo_http>('/<nombre_parametro>'/{<parametro>},function($parametro){
	return "<cadena_o_view>".$parametro;
});

Ejemplo

Route::get('/name/{name}/lastname/{lastname}',function($name,$lastname){
	return "Hola soy ".$name. " ".$lastname ;
});

para ingresar a esta ruta seria asi: http://localhost:8000/name/Eddy/lastname/Paz
una variacion es
Route::get('/name/{name}/lastname/{lastname?}',function($name,$lastname="apellido"){
	return "Hola soy ".$name. " ".$lastname ;
});
Lo anterior lo que hace es setear el apellido si no viene y con el signo ? indicamos que es opcional


CONTROLADORES
Podemos crear controladores de forma manual o utilizando artisan
Los controladores siempre deben tener un namespace para poder hacer referencia a ellos desde un router.
Por otro lado siempre deben extender de la clase Controller usando la la sentencia extends y use

Al llamar un metodos de un controlador desde un route se debe hacer de la siguiente manera
Route::get('prueba','PruebaController@prueba');
como primer argumento esta la ruta llamada prueba
y como segundo el nombre del controlador seguido de una arroba y el metodo que se quiere de ese controlador

Al llamar un metodo que requiere parametros de un controlador desde un route
Route::get('prueba/{name}','PruebaController@prueba');

TEORIA REST
Estilo arquitectonico para proporcionar estandares para sistemas informaticos que estan en la web.

RESTFULL
Endpoint que implementa rest

php artisan make:controller <name_controller> --resource//Crea controladores el --resource es opcional y sirve para que cuando se cree el controlador ya traiga los metodos comunes  a todos los controladores
Nota este controlador se crea en la carpeta Controllers

Nota: las siguientes anotaciones de los controladores es acerca de como acceder a ellos si fueron creados con artisan.
Para acceder a todos los metodos de un controlador desde un route se utiliza la siguiente sintaxis
Route::resource('name_url','nameController');
Si quisieramos acceder desde un navegador a una funcion del controlador seria
http://ip/name_url/function
Route::resource('name_url','nameController.function')
 

VIEWS
resource/views
Se recomienda que por cada crud exista una carpeta dentro de views
Si vamos a lanzar una vista desde un controlador se hace de la siguiente manera
return view(name_carpeta.name_view);

Motor de plantillas BLADE
@yield('nombre_elemento') // contenidos variables dentro de html
@extends('nombre_o_ruta')//contenido que heredara la vista
@section('cualquier_elemento','parametros del elemento')//envia parametro(string) a un elemento ya sea heredado o propio
@section('nombre_elemento_declarado_con_yield')
contenido html
@endsection//nota esta seccion se diferencia del anterior que aca ira contenido mucho mas extenso y que el elemento
fue declarado con yield
@csrf//modulo de proteccion anti cross-site request forgery esto va inmediatamente despues de la etiqueta form
NOTA 1: para que el formulario sea capaz de enviar distintos tipos de datos o incluso archivos se le debe colocar el siguiente atrivuto a la etiqueta form: enctype="multipart/form-data"
NOTA 2: Los formulario de html no soportan la directiva put/patch por ello al igual que @csrf la directiva
@method('PUT') va despues de la etiqueta form
esto para hacer una peticion de actualizacion y el action del form no solo sera la ruta trainers que esta definida en el route si no tambien el slug
/trainers/{{$trainer->slug}}
REQUESTS
https://laravel.com/docs/5.8/controllers#restful-localizing-resource-uris
Si el controlador fue creado con artisan nos provee de una plantilla con todos los metodos y en la siguiente tabla
se muestra la forma de enviarlos al controlador dependiendo de la accion que se desea hacer
Verb  URI Action  Route Name
GET /photos index photos.index
GET /photos/create  create  photos.create
POST  /photos store photos.store
GET /photos/{photo} show  photos.show
GET /photos/{photo}/edit  edit  photos.edit
PUT/PATCH /photos/{photo} update  photos.update
DELETE  /photos/{photo} destroy photos.destroy

Para una mejor visualizacion ir a la url mostrad en el inicio

ELOQUENT ORM
Object Relational Mapping
Es una tecnica de programacion para convertir datos utilizando un lenguaje de programacion orientado
a objetos y la utilizacion de una base de datos relacional como motor de persistencia.

Eloquent proporciona una implementacion de ActiveRecord bella y sencilla para trabajar con nuestra base de datos.

Cada tabla tiene un "Modelo" correspondiente que se utiliza para interactuar con esa tabla.

Los modelos le permiten consultar datos en sus tablas, asi como insertar nuevos registros en la misma. 

Modelo: Es la representacion de la informacion. La tarea principal es gestionar la informacion de la bbdd.

MODELOS
php artisan make:model Trainer --migration
Al utilizar la etiqueta --migration lo que hace basicamente es crear tablas sin utilizar directamente sql
en la carpeta database/migrations aparecen los archivos de migraciones y en especifico aparece uno 
donde podemos crear nuestra tabla es facil identificarlo por que el nombre que tiene contiene el nombre del modelo
Nota: dichas migraciones(sentencias sql) se van a ejecutar en la bbdd que tengamos configurada en el archivo
.env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laradex_development
DB_USERNAME=root
DB_PASSWORD=root

por ultimo ya que creamos los archivos de migraciones pero aun no hemos creado la bbdd 
entonces creamos la base de datos que tiene que tener el mismo nombre que le pusimos en el .env 
y luego colocamos 
php artisan migrate// este comando hara las migraciones a la bbdd


OPCIONAL(
Nota: puede dar error ya que laravel agrego el soporte para agregar emogis en la bbdd
entonces si utilizamos una version vieja de mysql debemos ir a la documentacion oficial para ver como se soluciona
en appserviceprovider.php
ponemos 
use Illuminate\Support\Facades\Schema;

y en el boot function
Schema::defaultStringLength(191);
)

NOTA: En los modelos debemos declarar una varible protegida llamada fillable en la cual la igualaremos a un vector con los campos que se pueden editar, 
protected $fillable=['name','avatar','description'] ;

AGREGAR CAMPO A TABLA EXISTENTE
Para agregar un campo a una tabla que ya existia es con 
php artisan make:migration add_avatar_to_trainer_table --table=trainers//esto lo que hace es crear un archivo
en database/migration/XXXXadd_avatar_to_trainer_table
que hara referencia a la tabla que vamos a modificar y es ahi donde colocamos el nuevo campo

$table->string('name_campo');


Para subir archivos al servidor en el metodo del controlador se debe colocar lo siguiente
if($request->hasFile('avatar')){//si existe un archivo con el nombre de input "avatar" entonces
  $file=$request->file('avatar');//se guarda en una variable el request indicandole que es un archivo
  $name=time().$file->getClientOriginalName();//se le pone un nombre unico para ello utilizamos el time
  $file->move(public_path())//movemos el archivo a 
  return $name;
}

AGREGAR CAMPO A TABLA TRAINER
php artisan make:migration add_description_to_trainer_table --table=trainers
luego nos dirijimos a database/migration/XXXXadd_description_to_trainer_table 
$table->string('name_campo');//en la funcion up existe una parte llamada Schema lo agregamos dentro
php artisan migrate

Implicit Binding
Resolver de manera automatica los modelos definidos en eloquent
en la funcion show de nuestros controladores en lugar de tener como parametro el $id podemos tener de parametro el modelo y la variable
Trainer $trainer
asi por ejemplo en el siguiente fragmento de codigo 
 public function show(Trainer $trainer)
{
   view('trainers.show',compact('trainer'));
}
NOTA: en el ejemplo anterior hay que mandarle el id desde las vista

SLUG
Basicamente el objetivo de slug es: NO MOSTRAR EL CONTENIDO DE VARIABLES PASADOS POR LA URL

PARA AGREGAR UN SLUG
Primero agregamos una migracion a una tabla
php artisan make:migration add_slug_to_trainers --table=trainers
Segundo despues de ejecutar artisan migration se crea un archivo en database/migrations/xxxxadd_slug_to_trainers
en la funcion up dentro del schema colocamos
$table->string('slug')->unique();
Tercero se ejecuta
php artisan migrate

NOTA: En todas las migraciones en los archivos de migraciones existe una funcion down y dentro del schema tenemos que colocar que debe realizar la migracion si hacemos rollback de la misma 
por ejemplo en la migracion anterior en la funcion down dentro de schema colocamos
$table->dropColumn('slug');
para que elimine la columna si hacemos rollback

luego de ello el slug pasaria a funcionar como si fuese el id, por tanto en todos los href donde pasemos un id ahora pasaremos un slug y en todos los controllers donde recibamos un id ahora ya no recibiremos un id si no mas bien un slug

Ahora uniendo ambos tanto slug como implicit binding podemos solo colocar unas lineas en el modelo para que funcionen ambos

   /**
   * Get the route key for the model.
   *
   * @return string
   */
  public function getRouteKeyName()
  {
      return 'slug';
  }

Con esto lo que hacemos es pasar el slug en la vista y en el controlador utilizamos el splicit binding 
es decir pasar como parametro un objeto de tipo entrenador, esto lo podemos hacer si en el modelo del trainer colocamos las lineas arriba mostradas

composer install//equivalente a npm install

LARAVEL COLLECTIVE
Podemos generar formularios y etiquetas html

Para instalar laravel collective
composer require "laravelcollective/html":"^5.4.0"
Luego tenemos que agregar laravel collective como proveedor en la ruta
config/app.php

en el array 'providers' => [],
la siguiente linea
Collective\Html\HtmlServiceProvider::class,

en el arrray 'aliases' =>[],
las siguientes lineas

'Form'=>Collective\html\FormFacade::class,
'Html'=>Collective\Html\HtmlFacade::class,
Luego la sintaxis para crear un FORMULARIO ES LA SOGUIENTE
Abrimos un formulario que recibe como parametros un array con la ruta que procesara el form,el metodo y si aceptara archivos
{!!Form::open(['route'=>'trainers.store','method'=>'POST','files'=>true])!!}
  <div class="form-group">
    {!!Form::label('name','Nombre')!!}
    {!!Form::text('name',null,['class'=>'form-control'])!!}
  </div>
  <div class="form-group">
    {!!Form::label('description','Descripcion')!!}
    {!!Form::textarea('description',null,['class'=>'form-control rounded-0'])!!}
  </div>
  <div class="form-group">
    {!!Form::label('avatar','Avatar')!!}
    {!!Form::file('avatar')!!}
  </div>
  {!!Form::submit('Guardar',['class'=>'btn btn-primary'])!!}
{!!Form::close()!!}

utilizando los formularios de laravel collective ya no tenemos que utilizar las directivas tales como
@csrf
el equivalente al formulario anterior es el siguiente: recordando que este es un formulario de creacion
<form class="form-group" method="POST" action="/trainers" enctype="multipart/form-data" files="true">
  @csrf
<div class="form-group">
  <label for="nombre">Nombre:</label>
  <input type="text" name="name" class="form-control">
</div>
<div class="form-group">
  <label for="description">descripcion</label>
  <textarea class="form-control rounded-0" name="description" rows="3"></textarea>
</div>
<div class="form-group">
  <label for="avatar">Avatar:</label>
  <input type="file" name="avatar" class="form-control-file">
</div>
<button type="submit" class="btn btn-primary">Guardar</button>
</form>

Para crear un formulario de edicion la cuestion es diferente pues hace un binding
el siguiente es un formulario de edicion solo la etiqueta form cambia para hacer el bindin luego seria cuestion de copiar y pegar todos los campos del formulario create y el se encargaria de llenar los mismos automaticamente es decir no es necesario indicarselo con el atributo value
NOTA: para que llene los campos automaticamente los campos deben estar nombrados con los mismos nombres que tienen en la bbdd es decir si en la bbdd tenemos un name el campo se debe llamar name
{!! Form::model($trainer,['route'=>['trainers.update',$trainer],'method'=>'PUT','files'=>true])!!}
<div class="form-group">
    {!!Form::label('name','Nombre')!!}
    {!!Form::text('name',null,['class'=>'form-control'])!!}
  </div>
  <div class="form-group">
    {!!Form::label('description','Descripcion')!!}
    {!!Form::textarea('description',null,['class'=>'form-control rounded-0'])!!}
  </div>
  <div class="form-group">
    {!!Form::label('avatar','Avatar')!!}
    {!!Form::file('avatar')!!}
  </div>
  {!!Form::submit('Actualizar',['class'=>'btn btn-primary'])!!}
{!!Form::close()!!}

El siguiente seria el equivalente al formulario anterior
<form class="form-group" method="POST" action="/trainers/{{$trainer->slug}}" enctype="multipart/form-data" files="true">
  @method('PUT')
  @csrf
<div class="form-group">
  <label for="nombre">Nombre:</label>
  <input type="text" name="name" class="form-control" value="{{$trainer->name}}">
</div>
<div class="form-group">
  <label for="description">descripcion</label>
  <textarea class="form-control rounded-0" name="description" rows="3">{{$trainer->description}}</textarea>
</div>
<div class="form-group">
  <label for="avatar">Avatar:</label>
  <input type="file" name="avatar" class="form-control-file">
</div>
<button type="submit" class="btn btn-primary">Actualizar</button>
</form>

COMPONENTES EN LARAVEL COLLECTIVE
Con laravel podemos crear componentes lo que debemos hacer es crear un componente 
en un archivo.blade.php
luego donde queramos ese componente
solo utilizamos la instruccion @include('ruta.componente')

Ejemplo

{!!Form::open(['route'=>'trainers.store','method'=>'POST','files'=>true])!!}
  @include('trainers.form')
  {!!Form::submit('Actualizar',['class'=>'btn btn-primary'])!!}
{!!Form::close()!!}

Donde traines.form contiene el componente

Validaciones
Las validaciones se hacen en el controlador con el metodo validate
ese metodo lo igualamos a una variable y dicho metodo tiene como parametro
un array con los campos a validar y las reglas que se le aplicaran
dicho metodo debe ir en las funciones store, update y antes de toda la logica 
tanto de store como update

public function store(Request $request)
    {
        $validatedData=$request->validate([
            'name'=>'required|max:10',
            'avatar'=>'required|image',
            'description'=>'required'
        ]);
         if($request->hasFile('avatar')){
            $file=$request->file('avatar');
            $name=time().$file->getClientOriginalName();
            $file->move(public_path().'/images/',$name);
        }
        $trainer=new Trainer();
        $trainer->name=$request->input('name');
        $trainer->description=$request->input('description');
        $trainer->avatar=$name;
        $trainer->slug = time().Str_slug($trainer->name);//para que guarde automaticamente el slug
        $trainer->save();
        return 'Saved';
    }

En Laravel existe la variable global errors si la validacion no se cumple y esta puede ser utilizada en las vistas
de la siguiente manera
@if($errors->any())
<div class="alert alert-danger">
  @foreach($errors->all() as $error)
  <li>{{$error}}</li>
  @endforeach
</div>
@endif
Requestss
La validacion anterior se llevo acabo en el controlador 
pero para tener mejor estructurado nuestro codigo es mejor utilizar form request
php artisan make:request StoreTrainerRequest//esto crea un request
y el archivo se crea en 
app/http/requests/StoreTrainerRequest.php
vamos a encontrrar dos funciones autorize y rules
en la funcion rules es donde tenemos que hacer las validaciones
como aun no estamos viendo autorizacion 
devolvemos "true" en autorizacion 
y en el metodo rules ponemos las reglas
En el controlador donde queremos usar las validaciones por medio del archivo request lo incluimos en este caso debemos incluirlo en TrainerController
use LaraDex\Http\Requests\StoreTrainerRequest;
ahora en el metodo store en lugar de usar como parametro un request normal utilizamos el request que acabamos de crear

public function store(StoreTrainerRequest $request){}

al hacer esto se comporta exactamente de la manera anterior si se cumple la validacion sigue con el flujo de lo contrario solo regresa a la view

Lo unico que hacemos es separa la validacion del controller por medio del request

ELIMINAR UN REGISTRO
se envia el slug(que ahora es nuestro id) al metodo destroy
el metodo destroy recibe como paramtro el modelo al que hace referencia y no el slug como seria lo logico esto por implicit binding

Responses
Existen diferentes tipos de responses es decir lo que retorna las funciones del controlador
php artisan route:list// muestra todas las rutas definidas
un tipo de redireccionamiento es 
return redirect()->route('trainers.show',[$trainer]);
el route recibe dos parametros la ruta y si hay que mandarle parametros en este caso un objeto trainer

Session Data
return redirect()->route('trainers.show',[$trainer])->with('status','Entranador actualizado correctamente');
Es lo mismo que lo anterior una respuesta con redireccionamientopero con el metodo with podemos enviar mas informacion como por ejemplo mensajes de completacion
pero a esta variable se accede en la vista como variable de session pues es eso lo que es
se accesederia a ella de esta manera
session('status')

AUTENTICACION
php artisan// muestra todos los comandos que se pueden usar con artisan

php artisan make:auth//implementa un login tanto la vista como toda la logica detras de ella para hacer un login
NOTA: si ya tenemos un app.blade.php esta instruccion modificara por completo este documento, preguntara si queremos modificar el app.blade.php y le decimos que si


ROLES DE USUARIO
crearemos migraciones para que un usuario pueda tener una o mas roles y como un rol puede ser asignado a muchos usuarios entonces tendremos una relacion de muchos a muchos por lo cual crearemos un tabla pivote.

php artisan make:model Role -m //crea un modelo al mismo que crea una migracion para este modelo y este estara en 
database/migration/XXX_create_roles_table.php
en dicho archivo especificamos los campos
que tendra nuestra tabla roles dentro de la funcion up dentro de Schema

php artisan make:migration create_role_user_table//crea una migracion la cual sera la tabla pivote(mucho a muchos) de rol y usuario dicha migracion se encontrara en 
database/migration/XXX_create_role_user_table.php
en dicha migracion(tabla en la bbdd) tendra tanto el id del rol como el id del usuario dentro de la funcion up dentro de Schema

por ultimo ejecutamos: php artisan migrate para que cree las tablas en la bbdd

Por ultimo tenemos que relacionar nuestros modelos ya que usuario se relaciona de muchos a muchos con rol(esto por que asi lo definimos)
para hacer esto en ambos modelos tenemos que declarar una funcion publica donde del usuario obtengamos todos los roles que tiene y del rol obtengamos todos los usuarios que tienen ese rol

BELONGSTOMANY

En el modelo User 
public function roles(){
        return $this->belongsToMany('LaraDex\Role')
}

En el modelo Role
public function user(){
      return $this->belongsToMany('LaraDex\User');
}

SEEDERS(semillas)
Los sideers lo que hacen es llenar con datos base(quemados) dentro de la bbdd es decir si queremos que una tabla al montar el sistema ya tenga datos por defecto(esto se utiliza mas en el registro de usuarios)


php artisan make:seeder RoleTableSeeder//crea un seeder para los roles,estos se almacenan en 
database/seeds/RoleTableSeeder
php artisan make:seeder UserTableSeeder//crea un seeder para los user,estos se almacenan en 
database/seeds/UserTableSeeder


paso 1:Dentro del RoleTableSeeder
primer incluimos el modelo con su namespace
use LaraDex\Role
paso 2:Dentro de la funcion run()
crearemos un objeto del modelo y lo llenamos con los datos que necesita ese modelo


paso 1:Dentro del UserTableSeeder incluimos tanto el modelo de usuarios como el de roles es decir Role y User con los namespace
use LaraDex\Role
use LaraDex\User;
Hacemos un Query a la base de datos que nos traiga el rol que cumpla con el campo que le pasemos por ejemplo si queremos el rol de user o el de Admin
Ejemplo: mandamos a consultar a la bbdd el primer rol que en su campo name tenga el valor user
$role_user=Role::where('name','user')->firts();
luego creamos un objeto del modelo User y lo llenamos con los datos que necesita
Nota: para el password larabel utiliza bcrypt
Ejemplo
$user->password=bcrypt('query');//donde query seria la contrase√±a 
por ultimo le asignamos el rol al usuario y como arriba cuando creamos una funcion que devolvia el belongsToMany en el modelo de User esto lo que hace es resolver los modelos de muchos a muchos y nos provee de metodos para atachar un elemento a otro elemento cuando la dependencia es de muchos a muchos como en este caso usuario a rol

$role_user=Role::where('name','user')->first();
        $role_admin=Role::where('name','Admin')->first();
        $user=new User();
        $user->name="User";
        $user->email="user@email.com";
        $user->password=bcrypt('query');
        $user->save();
        $user->roles()->attach($role_user);

El archivo
database/seeds/DataBaseSeeder.php
este archivo se encarga de arrancar nuestros seeders con su metodo call 

luego para ejecutar los seeders y las migracions
composer dump-autoload//regenera los archivos para que no haya errores
php artisan migrate:refresh --seed//siembra los datos en la base de datos

LOGICA DE AUTORIZACION(En el modelo User)
Primero en el modelo de usuario creamos una funcion que nos devuelva si un usuario 
tiene un rol hasRole($role)
como nuestra relacion es de muchos a muchos entonces un usuario puede tener varios roles
por ende tambien una funcion hasAnyRole($roles) que devolvera el rol o los roles que el usuario tiene
y hasAnyRole utiliza a hasRole para validar si el usuario efectivamente tiene un rol asignado
por ultimo creamos una funcion que valida la autorizacion de roles authorizeRoles($roles)
que a su vez manda a llamar a hasAnyRole($roles)

autorizeRoles($roles)-|
                      |->hasAnyRole($roles)-|
                                            |->hasRole($role)
Si el perfil no esta autorizado, lanzara un abort que nosotros programamos o bien retornar una vista que nosotros queramos
vamos a filtrar que solo los administradores puedan ver los entrenadores
esto dentro del TrainerController y en cada funcion que retorna una vista podemos poner la siguiente
linea
$request->user()->authorizeRoles('admin');  //esto hace una peticion para saber que usuario es
y el autorizeRoles es la funcion que creamos con anterioridad en la cual si el perfil no esta autorizado para esa vista entonces lanzara un abort o una vista que nosotros programemos y le enviamos como parametro solo el perfil o perfiles que tienen permisos en esa vista 

REDIRECCION LOGUEO INICIAL
Si queremos que despues de loguearnos nos redireccione por default a una vista lo hacemos en
app/Http/Auth/LoginController
en la variable $redirectTo='/vista'
En esa misma carpeta Autho se hace la redireccion de diferentes casos de uso

VUE
Framework de javascript
en el root de nuestra aplicacion hay un package.json
Todo lo relacionado con las dependencias de nuestra app esta en package.json
Vamos a utilizar npm para las dependencias(para ello debemos instalar node)
luego en la consola ubicados en el root de nuestro proyecto
npm install//instala todas las dependencias de javascript

Components en Vue
Los componentes estan ubicados en 
/resources/js/components/

partes de un componente en vue
1. template
2. script
3. style
<template>
</template>
<script>
</script>
<style>
</style>
¬øComo incorporar vue dentro de laravel?
-creamos otra ruta restfull
Route::resource('pokemons','PokemonController');
-creamos el controlador respectivo
php artisan make:controller PokemonController

1.Requerir vue
2.Crear componente
3.registrar el nuevo componente en el app.js
dicho app.js se encuentra en resources/js/app.js
Vue.component(
                'nombre_componente',
                require('ruta_del_comp.').default);
¬øComo incorporar vue en laravel?
1.instalar las dependencias con npm install
2.Crear ruta
3.Crear controlador
4.Retornar vista 
5.Crer vista en Resources/views (crear carpeta si se quiere)
6.Extender de nuestra layout
Nota: laravel al instalar las dependencias de npm
nos provee de un componente de ejemplo que se encuentra en resources/js/components/ExampleComponent.vue
7. en la vista agregamos 
<example-component></example-component>
Opcional: npm run dev para compilar javascript
Opcional: npm run watch para recompilar todas las modificaciones que se han hecho es parecido al nodemon


PARA SPINNERS
https://projects.lukehaas.me/css-loaders/

Consumos de api's o microservicios con Axios
Axios un cliente http basado en promises
dentro de la parte de script del componente podemos colocar la 
funcion mounted(){} y hacer la peticion con axios
en la misma parte de script podemos declarar las 
variables a utilizar en el componente seria algo similar al state en React
ya en la parte del template podemos llamar a la variables por su nombre sin necesidad de una palabra reservada como this o algo por el estilo.
Ejemplo con axios
Los dos primeros parametros son la ruta y lo que mandamos es decir un objeto 
luego cerramos el modal
por ultimo manejamos el error
axios.post('htttp://127.0.0.1:8000/pokemons',{
          name:this.name,
          picture:this.picture
        })
        .then(function(res){
          console.log(res)
          $('addPokemon').modal('hide')
        })
        .catch(function(err){
          console.log(err)
        });

Programacion en VUE
Las directivas programaticas de vue siempre llevan
v-<nombre del comando>
por ejemplo
v-for="pokemon in pokemons" //ciclo for
v-show="loading"//visibilidad de un componente
v-model="name" //binding de una etiqueta
@submit.prevent="savePokemon"//previene el enviado en una etiqueta form es decir tiene que ir como atributo de form y savePokemmon seria un metodo 
dentro de la parte de script
dichas directivas se pueden utilizar directamente
en las etiquetas html de los componentes 
como si de atributos se tratara


php artisan make:model Pokemon -m
Crea el modelo y hace la migracion correspondiente
php artisan migrate
Ejecuta la migracion

Partes de un script en vue
 data(){
      return{
        name:null,
        picture:null
        }
    },
    methods:{
      savePokemon:function(){
        console.log(this.name),
        console.log(this.picture)
      }
    }
donde data vendria hacer el estado y methods las
funciones que manejaran dicho estado es importante recalcar que tambien existe los metodos como mounted

Event bus
Permite emitir eventos desde un componente y estos pueden ser escuchados desde otros componentes.

Creamos un archivo en la carpeta js en la raiz de js
y requerimos a vue este sera nuevo event-bus.js

window.Vue=require('vue')
const bus = new Vue();

export default bus

EMISOR
Luego donde queremos emitir el event bus lo importamos

import EventBus from '../event-bus';
y ya importado podemos emitir un evento por medio de emit que recibe dos parametros el nombre del evento 
y la data de ser necesario

EventBus.$emit('pokemon-added',res.data.pokemon)

REceptor
Luego donde queremos recibir el event bus lo importamos

import EventBus from '../event-bus';

ya importado utilizamos el metodo on para estar a la escucha y ya que emitimos el evento y mandamos un res
podemos recibirlo y meterselo a un array

created(){
            EventBus.$on('pokemon-added',data=>{
                this.pokemons.push(data)
            })
        }
Nota: created es otro metodo de los componentes como lo es mounted ... y asi sucesivamente

Por que vue?

Remover vue de nuestro proyecto
php artisan preset none

Utilizar React
php artisan preset react

Relacion uno a muchos en Eloquent
Si una relacion es de muchos a muchos eloquent asigna
un snake_case como foreign key es decir
si un post tiene uno o mas comentarios 
eloquent asumira que el foreign key de los comentarios sera post_id

1. Creamos una migracion para agregar la llave foranea

php artisan make:migration add_trainer_id_to_pokemon_table

2. ya en el archivo generado por la migracion
en el levantado (up) creacmo la llave foranea 
y en el bajado(down) la removemos

public function up()
    {
        Schema::table('pokemon', function (Blueprint $table) {
            $table->integer('trainer_id')->unsigned();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
         Schema::table('pokemon', function (Blueprint $table) {
            $table->integer('trainer_id');
        });
    }

3. ejecutamos la migracion con 
php artisan migrate

4. ya en el modelo padre creamos la funcion que nos
devolvera los hijos, en este ejemplo el entrenador pokemon tendra uno o mas pokemons

public function pokemons(){
    return $this->hasMany('LaraDex\Pokemon');
  }

5. Ya en el modelo hijo creamos la funcion que nos devolvera el padre, en este ejemplo un pokemon solo 
puede pertenecer a un trainer.

public function trainer(){
        return $this->belongsTo('LaraDex\Trainer');
    }

Me quede en el video 49